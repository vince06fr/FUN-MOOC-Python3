# Semaine 2 - Notions de base pour écrire son premier programme

---

## Vidéo 1 - Codage, jeux de caractères et Unicode

- Codage ASCII sur 7 bits : 128 caractères
- Jeu de caractères
- Police de caractères
    - définit le **glyphe** pour afficher un caractère à partir du code ASCII
- Jeux de caractères étendus
- Projet UNICODE + 120 000 caractères, pour toutes langues du monde
    - UTF8, A utiliser en priorité, compatible ASCII
    - UTF 16,
    - UTF 32
    - UNICODE ne suit plus la logique d'un octet = un caractère
        - byte vs str
- Python est compatible UNICODE.
    - Il est toutefois recommandé **d'écrire les lignes de code**, notamment les variables, **avec les caractères de base** (Eviter donc les lettres accentués ou les caractères grecs**, espace non-sécable,**..) ! Bien que cela soit désormais possible en Python3

        [NO-BREAK SPACE (U+00A0)](http://www.fileformat.info/info/unicode/char/a0/index.htm)

    - Le programme Python doit lui-même être encodé UTF-8 (voir dans l'IDE)
        - ou `# -*- coding: <nom_de_l_encodage> -*-`
        - ou `# coding: <nom_de_l_encodage>`
    - Pas de problème avec le "texte", commentaire
- l'octet '0xA4' correspond au caractère ¤, bien connu lorsque pb d'encodage, par exemple à la place de €
- Pour écrire du français, il faut au minimum ;
    - `UTF-8` (le seul à retenir désormais)
    - `ISO 8859-1` (`Latin-1`)
    - `ISO 8859-15` (`Latin-9`)
    - `CP1252`

    ISO/IEC 8859-*, nommés aussi Latin-**

- Les 4 premiers codes d'une chaîne UNICODE permet de préciser l'encodate utf-8, 16 ou 32
- Unicode est un standard qui définit à la fois un jeu de caractères et des encodages

### Complément sur comment connaître l'encoding du PC avec une commande Python

    import sys
    print(sys.getdefaultencoding())
    
    Retourne : utf-8

## Vidéo 2a et 2b - Les chaines de caractères

### Vidéo 2a - Les chaines de caractères (1)

    "spam"
    Retourne 'spam'  # On peut utiliser les guillements dans la déclaration
    		# Le système retient les quotes

- Obtenir de l'information en ligne depuis ipython ou notebook. Python est autodocumenté

    str?  # que depuis ipython ou notebook
    
    Retourne :
    Init signature: str(self, /, *args, **kwargs)
    Docstring:     
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str
    
    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returnUn pes the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
    Type:           type
    Subclasses:     _rstr, LSString, include, SortKey

- Obtenir de l'information en ligne depuis Idle

    >>> help(str)
    Un message apparaît "Squeezed text (423) lignes. Dans la bulle, il est préciser 
    qu'il faut double-cliquer sur le message pour lire le texte
    
    Help on class str in module builtins:
    
    class str(object)
     |  str(object='') -> str
     |  str(bytes_or_buffer[, encoding[, errors]]) -> str
    .....
    
    ....
    |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  maketrans(...)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
    
    Fin de l'aide
    >>>
    

- Voir toutes les méthodes d'une chaînes avec la commandes dir (Idle et Jupyter Notebook)

    >>>dir(str)
    ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', 
    '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', 
    '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', 
    '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', 
    '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', 
    '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 
    'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 
    'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 
    'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 
    'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 
    'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 
    'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', '**title**', 
    'translate', 'upper', 'zfill']

- Quelques méthodes

    # .title()
    'un MOOC sur python'.title()
    retourne : 'Un Mooc Sur Python'
    
    # .replace
    c = "un MOOC sur Python"
    print(c.replace("Python", 'Wordpress'))  # En cas de faute dans la chaîne à changer,
    					# il n'y a pas d'erreur. Y compris la casse.
    					# La chaîne n'est pas remplacée.

 La méthode .format

    n = 'Sonia'
    age = 62
    "Notre amie {} a {} ans aujourd'hui !".format(n, age)  # C'est bien des guillements double
    retourné :
    "Notre amie Sonia a 62 ans aujourd'hui !"

    n = 'Sonia'
    age = 62
    "Notre amie {} a {} ans aujourd'hui !".format(n, age)  # C'est bien des guillements double
    retourné :
    "Notre amie Sonia a 62 ans aujourd'hui !"

    n = 'Sonia'
    age = 62
    "Notre amie {} a {} ans aujourd'hui !".format(n, age)  # C'est bien des guillements double
    retourné :
    "Notre amie Sonia a 62 ans aujourd'hui !"

- Les f-strings, une évolution avec Python3.6, plus lisibles/expressifs

    f"Notre copine {n} a {age} and !"  # Ecriture directe de la phras avec f devant

### Vidéo 2b - Les chaines de caractères (2)

### UNICODE et Python3 (pas en python2)

- Exemples

    "noël, été"
     #Retourne bien 'noël, été'

- Caractères unicode : commence par \u

    "\u03a6"
    # Retourne 'Φ'

- Autre caractère... qui n'est pas présent dans ma police

    "\u0556"
    # retourne un carré, la police ne reconnaît pas le caractère 
    
    Avec une autre police
    # retourne **'Ֆ'**

### Encodage et décodage

- Encode en utf8 (pourrait être un autre code)

    s = "Un noël en été"
    s.encode('utf8')      # fonction .encode
     # Retourne : b'Un no\xc3\xabl en \xc3\xa9t\xc3\xa9'  Voir les caractères étendus

- Decode l'utf8

    en = s.encode('utf8')
    print(en)
    # retourne bien : b'Un no\xc3\xabl en \xc3\xa9t\xc3\xa9'
    
    en.decode('utf8')    # fonction .decode
    # retourne : 'Un noël en été'

## Les outils de base sur les chaînes de caractères str

- Découpage - assemblage : split et join

    'abc=:=def=:=ghi=:=jkl'.split('=:=')     # .split pour découper
     # Retourne la liste : ['abc', 'def', 'ghi', 'jkl']

    "=:=".join(['abc', 'def', 'ghi', 'jkl'])    # .join pour assembler
     # retourne la chaîne : 'abc=:=def=:=ghi=:=jkl'

- Avec .split et un terminator qui va laisser une chaîne vide à la fin de la liste

    'abc;def;ghi;jkl;'.split(';')   # Le séparateur est passé en argument de .split
    
     # Retourne : ['abc', 'def', 'ghi', 'jkl', '']  

    ";".join(['abc', 'def', 'ghi', 'jkl', ''])  # Avec ou sans dernière chaîne vide
    
    # Retourne : 'abc;def;ghi;jkl;'

- .replace

    "abcdefabcdefabcdef".replace("abc", "zoo")
    
    # retourne : 'zoodefzoodefzoodef'    # Uniquement les chaînes détectées

- Plusieurs appels à replace peuvent être chaînés comme ceci :

    c = "Mes amis sont d'accord"
    print(c)
    c.replace('amis', 'ennemis').replace('d`\'accord', 'pas d\'accord')
    
     # retourne :
       # Mes amis sont d'accord
       # "Mes **ennemis** sont **d'accord**"

- Nettoyage de chaîne avec .strip

    # on pourrait utiliser .replace
    " abc:def:ghi ".replace(" ", "")
    
    # retourne : 'abc:def:ghi'    Les espaces au début et à la  fin 
                                 # sont remplacés par un caractère vide

- On retire les espaces au début et à la fin (pas à l'intérieur même si en double)  et les caractères avec un anti-slash pour le formatage \t, \n mais pas le \'

    "    **\t**une chaîne \'avec\' des trucs qui dépassent **\n**".strip()
    
     # Retourne : "une chaîne 'avec' des trucs qui dépassent"

- On peut enchaîner  un .split avec un .strip

    'abc;def;ghi;jkl;'.strip(';').split(';')
     # Retourne : ['abc', 'def', 'ghi', 'jkl']

- Rechercher une sous-chaîne avec .find et rfind (reverse, en commençant par la fin

    # l'indice du début de la première occurrence
    "abcdefcdefghefghijk".find("def")
    
     # Retourne la première occurence : 3 ... Quatrième lettre car commence par 0

    # l'indice du début de la première occurrence en commençant par la fin
    # La lecture est toujours de gauche à droite
    "abcdefcdefghef**def**ijk".rfind("def")
    
     # Retourne la première occurence en commençant la détection par la fin : 14

- Si find ne trouve pas la sous-chaîne, retourne -1, False
- Index permet de lever une exception pour la traiter

    try:
        "abcdefcdefghefghijk".index("zoo")
    except Exception as e:
        print("OOPS", type(e), e)
    
     # Retourne : OOPS <class 'ValueError'> substring not found

### La meilleure solution pour trouver des sous-chaînes est **in**

    "abc" in "abcdefcdefghefghijk"
     # Retourne : True   puisqu'il y a cette sous-chaîne

### La méthode .count

    "abcd**ef**cd**ef**gh**ef**ghijk".count("ef")
    
     # retourne le nombre d'occurences, ici : 3

### .starwith et .endwith

    "abcdefcdefghefghijk".startswith("abcd")
    
    "abcdefcdefghefghijk".endswith("ghijk")
    
     # Les deux retournent : True

### Autres méthodes sur les chaînes de caractères

.upper()

.lower()

.swapcase()

.capitalize(), uniquement la première lettre

.title()

.center

    "jose".center(8,"_")
     # Retourne '__jose__'

.ljust

    n = "http://www.example.com"
    n.lstrip('hcztowz.')
    
    # retourne 'p://www.example.com'  Les premières lettres de l'argument retirées

.splitlines avec ou sans les caractères de retour lignes (keepends=True)

    'ab c**\n\n**de fg**\r**kl\r\n'.splitlines(keepends=True)  # \n est le retour ligne
    ['ab c\n', '\n', 'de fg\r', 'kl\r\n']
    
    # Retourne ['ab c', '', 'de fg', 'kl']  sans les caractères de retour ligne
    
    'ab c\n\nde fg\rkl\r\n'.splitlines()
    
    # Retourne : ['ab c**\n**', '**\n**', 'de fg**\r**', 'kl**\r\n**'] avec caractères de retour ligne

[Caractères des retours-lignes](https://www.notion.so/5914efaea11b4b6783edce2b1d47e25e)

.strip

    '   spacious   '.strip()
     # Retourne : 'spacious'
    
    'www.example.com'.strip('cmowz.')
    # Retourne : 'example'

.zfill

    "42".zfill(5)
     # Retourne : '00042'
    
    >>> "-42".zfill(5)
     # Retourne :'-0042'

## La fonction print

- la fonction print laisse un espace entre ses valeurs

    print(1, 'a', 12 + 4j)
     # Retourne : 1 a (12+4j)

- Avec end=' ', on évite un retour ligne

    # une deuxième ligne en deux appels à print
    print("Tout", "est", "sur", end=' ')
    print("la", "même", "ligne")
     # retourne : Tout est sur la même ligne

- Peut imprimer un module

    # on peu t imprimer par exemple un objet 'module'
    import math
    
    print('le module math est', math)
    
    # Retourne : Le module math est :  <module 'math' (built-in)>
    
    # Dans un autre environ nement, il retourne : le module math est 
    # <module 'math' from '/opt/conda/lib/python3.7/lib-dynload/
    # math.cpython-37m-x86_64-linux-gnu.so'>

- Présentation des instances de classe

    # pour définir la classe Personne
    class Personne:
        pass
    
    # et pour créer une instance de cette classe
    personne = Personne()
    
    # voilà comment s'affiche une instance de classe
    print(personne)
    
    # Retourne : <__main__.Personne object at 0x7f8fd00c3c50>

## Formatage des chaînes avec f-strings

- Affichage des données

    # donnons-nous quelques variables
    prenom, nom, age = 'Jean', 'Dupont', 35
    # mon premier f-string
    f"{prenom} {nom} a {age} ans"
    
    # retourne : 'Jean Dupont a 35 ans'

- A l'intérieur des accolages, des calculs sont possibles

    # Nombres de caractères d'un mot
    mot ='Ceci est un essai'
    print(f'L\'expression "{mot}" contient {len(mot)} lettres.')
    
    # Retourne : L'expression "Ceci est un essai" contient 17 lettres.

f-string ne réalise pas d'impression, il faut utilier la fonction print()

## Formatage des chaînes avec la méthode .format (avant les f-strings)

- Suite d'accolade pour placer les variables

    # Avec .format
    prenom, association, duree = 'José', 'Tricassinux', 1
    {} est membre de {} depuis {} ans.".format(prenom, association, duree)
    
    "{} est membre de {} depuis {} ans.".format(prenom, association, duree)

- Autres formes

    nom, prenom, age = 'Relland', 'José' ,62
    (print("{le_prenom} {le_nom} a {l_age} ans."
       .format(le_nom=nom, le_prenom=prenom, l_age=age)))
    
    Retourne : José Relland a 62 ans.

- Autre forme par la numérotation des variables (commence par 0)

    (print("{1} {0} a {2} ans"
       .format(nom, prenom, age)))
    
    # Retourne : José Relland a 62 ans

## Formatage des chaînes avec le caractère %

    # l'ancienne façon de formater les chaînes avec %
    # est souvent moins lisible
    "%s %s a %s ans" % (prenom, nom, age)
    
    Retourne : 'José Relland a 62 ans'

## Le format des chaînes avec f-strings

- Précisions sur les arrondis : **:.2f**

    from math import pi
    # un f-string
    f"pi avec 2 chiffres après la virgule {pi:.2f}"
    
    # Retourne : 'pi avec 2 chiffres après la virgule 3.14'

    rapport = 1 / 3
    f"1/3 avec deux chiffres : {rapport:.2f}."
    
    # Retourne : '1/3 avec deux chiffres : 0.33.'

- avec .format() et liaison par nom

    
    ("pi avec seulement 2 chiffres apres la virgule {flottant:.2f}"
         .format(flottant=pi))
    
    # Retourne : 'pi avec seulement 2 chiffres apres la virgule 3.14'

- 0 en début de nombre pour garder le même nombre de digits : **:04df**

    x = 123
    f"{x:04df}"

- Largeurs fixes dans les colonnes < ^ >

    # données à afficher en colonnes
    comptes = [
    ('José', 'Relland', 2000),
    ('Florence', 'Callot', 1000),
    ('Renaud', 'Robert', 500),
    ]
    
    for prenom, nom, solde in comptes:
    	print(f"{prenom:<10} -- {nom:^12} -- {solde:>8} €")
    
     # Retourne : avec les centrages et les espaces :
    # José       --   Relland    --     2000 €
    # Florence   --    Callot    --     1000 €
    # Renaud     --    Robert    --      500 €

- Compléments sur format avecc des exemples

[https://docs.python.org/3/library/string.html#formatstrings](https://docs.python.org/3/library/string.html#formatstrings)

## Obtenir une réponse de l'utilisateur

### Avec la fonction input

    v_naissance = input('Entrez votre ville de naissance : ')
    print(f"Votre ville de naissance est : {v_naissance}.") 
    
    # La première ligne retourne : Entrez votre ville de naissance :
    avec en-dessous une boîte à texte.
    
    Une fois entré le nom de la ville (exemple Rouen + Entrée 
    	(ou Shift Entrée avec Jupyter)
    
    # La seconde ligne retourne :
    # Votre ville de naissance est : Rouen.

- Dans la réalité des applications, on fait appel au module `argparse`

## Les expressions régulières

En python, les expressions régulières sont disponibles de manière plus traditionnelle, via le module re (regular expressions) de la librairie standard.

    import re # import le module des regular expressions

- on cherche à savoir si un objet chaine est ou non de la forme *-*.txt, et si oui, à calculer la partie de la chaine qui remplace le * :

    # un objet 'expression régulière' - on dit aussi "pattern"
    regexp = "(.*)-(.*)\.txt"  #... savoir lire cela !
    
    # la chaine de départ
    chaine = "abcdef.txt"
    
    # la fonction qui calcule si la chaine "matche" le pattern
    match = re.match(regexp, chaine)    # C'est là que la chaîne est évaluée
    match is None                       # None, ne match pas ! 
    
     # Retourne : True                  # Il n'y a pas de tiret, donc none => True
    
    
    # Avec cette chaîne, cela match
    chaine = "abcd-ef.txt"
    
    # Retourne : False (à cause du None)

- Pour lire les deux chaines   matn]ch[

    print(match[1].strip())
    print(match[2].strip())

### Documentation des Regular Expressions operations

[re - Regular expression operations - Python 3.8.1 documentation](https://docs.python.org/3/library/re.html)

Les caractères spéciaux des expressions régulières

[Les caractères spéciaux des expressions régulières](https://www.notion.so/642b7fa34e044540be46cd6a483d6597)

Les caractères spéciaux des expressions régulières

Les caractères spéciaux des expressions régulières

Et bien d'autres à voir !

### Approfondissement en recherche de chaînes

- Rechercher, dans une chaîne, les mots commençant ou terminant par a ou m

    # Exemple de chaîne à tester... En fait une liste
    # Si cela était une chaîne de caractères, ce sont les caractères qui seraient listés
    sentences = ['Lacus a donec, vitae gravida proin sociis.', 
                 'Neque ipsum! rhoncus cras quam.']
    
    # Les mots commençant ou terminant par a ou m
    # **r"*expression régulière*"   La forme de la raw-string (gère mieux les backslaches
    	# \w* : qui commence ou termine avec les caractères entre crochets
    	# \W : limite qu'à la terminaison** 
    for sentence in sentences:
        print(f"---- dans >{sentence}<")
        print(re.findall(r"\w*[am]\W", sentence))   # le \W limite le résultat 
    						# qu'au fin par a et m
    

- Utilisation de la méthode re.split
    - Proche de str.split avec les séparateurs reconnus comme une expression régulière

    for sentence in sentences:
        print(f"---- dans >{sentence}<")
        print(re.split(r"\W+", sentence)) # \W+ Toute suite d'au moins un 
    					# caractère non alphanumérique
        print()
    
    # Retourne tous les mots de la liste

- Permet de séparer tous les mots d'une d'un texte
- Utilisation de la méthode sub.split

    for sentence in sentences:
        print(f"---- dans >{sentence}<")
        print(re.sub(r"(\w+)", r"<\1>", sentence))  # \lfaire référence au groupe
    				# X\1Y permet d'entourer le groupe de caractères !
        print()
    
    # Retourne : 
    ---- dans >MLacusm a mdonec, 2vitae gravida proin asociis.<
    <MLacusm> <a> <mdonec>, <2vitae> <gravida> <proin> <asociis>.
    
    ---- dans >Neque ipsum! rhoncus2 cras quam.<
    <Neque> <ipsum>! <rhoncus2> <cras> <quam>.
    
    ---- dans >0Et moi0 !<
    <0Et> <moi0> !

- Pourquoi les raw-strings
    - Pour désactiver les \ exemple : \t sera interprété comme une tabulation
    - Si pas de raw-string, il faut doubler \\ tous les backslashes

### Un second exemple

- Considérons ces chaînes 5 parties :
    - une suite de chiffres,
    - une suite de lettres,
    - des chiffres à nouveau,
    - des lettres
    - et enfin de nouveau des chiffres

    samples = ['890hj000nnm890',    # cette entrée convient
              '123abc456def789',   # celle-ci aussi
              '8090abababab879',   # celle-ci non
              ]
    
    # ATTENTION :  pas d'espaces
    regexp1 = "[0-9]+[A-Za-z]+[0-9]+[A-Za-z]+[0-9]+"   # Suite d'au moins 1 caractère
    
    for sample in samples:
        match = re.match(regexp1, sample)
        print(f"{sample:16s} → {match}")
    
    # Retourne :
    # 890hj000nnm890   → <re.Match object; span=(0, 14), match='890hj000nnm890'>
    # 123abc456def789  → <re.Match object; span=(0, 15), match='123abc456def789'>
    # 8090abababab879  → None

- Facilitation de la lecture avec une fonction

    # pour simplement visualiser si on a un match ou pas
    def nice(match):
        # le retour de re.match est soit None, soit un objet match
        return "no" if match is None else "Match!"
    
    # la même chose mais un peu moins encombrant
    print(f"REGEXP={regexp1}\n")
    for sample in samples:
        match = re.match(regexp1, sample)
        print(f"{sample:>16s} → {nice(match)}")
    
    # Retourne :
      # REGEXP=[0-9]+[A-Za-z]+[0-9]+[A-Za-z]+[0-9]+
    
      #  890hj000nnm890 → Match!
      # 123abc456def789 → Match!
      # 8090abababab879 → no

Nommer un morceau (un groupe) 

- Nommons le groupe du milieu dans la regexp
    - [0-9]+[A-Za-z]+
    - (?P<needle>[0-9]+)   Dans parenthèses, ?P<nom_varaible>Expression
    - [A-Za-z]+[0-9]+

    samples = ['890hj000nnm890',    # cette entrée convient
              '123abc**456**def789',   # celle-ci aussi
              '8090abababab879',   # celle-ci non
               '8090ababab',       # celle-ci non plus !
              ]
    # on se concentre sur une entrée correcte
    haystack = samples[1]  # En fait le deuxième mot (commence par 0)
    haystack
    
    # la même regexp, mais on donne un nom au groupe de chiffres central
    regexp2 = "[0-9]+[A-Za-z]+**(?P<needle>[0-9]+**)[A-Za-z]+[0-9]+"
    
    print(re.match(regexp2, haystack).group('needle'))
    
    # Retourne 456

- Commentaires :
    - les parenthèses définissent un groupe,
    - `?P<needle>` spécifie que ce groupe pourra être référencé sous le nom `needle` (cette syntaxe très absconse est héritée semble-t-il de perl).

### Un troisième exemple

- On peut restreindre un morceau de chaîne à être identique à un groupe déjà vu plus tôt dans la chaîne.

    regexp3 = "(?P<id>[0-9]+)[A-Za-z]+(?P<needle>[0-9]+)[A-Za-z]+(?P=id)"

    # pour simplement visualiser si on a un match ou pas
    def nice(match):
        # le retour de re.match est soit None, soit un objet match
        return "no" if match is None else "Match!"
    
    print(f"REGEXP={regexp3}\n")
    for sample in samples:
        match = re.match(regexp3, sample)
        print(f"{sample:>16s} → {nice(match)}")
    
    # Retourne : 
    # REGEXP=(?P<id>[0-9]+)[A-Za-z]+(?P<needle>[0-9]+)[A-Za-z]+(?P=id)
    
    #   **890**hj000nnm**890** → Match!
    #  123abc456def789 → no
    #  8090abababab879 → no
    #       8090ababab → no

## Commen utiliser la librairie Compilation des expressions régulières

Fonctions de commodité et workflow

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/24a34888-6791-49ba-a6ff-8fa2ee4b196e/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/24a34888-6791-49ba-a6ff-8fa2ee4b196e/Untitled.png)

A terminer...

[https://www.fun-mooc.fr/courses/course-v1:UCA+107001+session02/courseware/16fe81d60f134de9a10dd0c44a597584/19432dd5bb7d439f985b82c9a60276ad/](https://www.fun-mooc.fr/courses/course-v1:UCA+107001+session02/courseware/16fe81d60f134de9a10dd0c44a597584/19432dd5bb7d439f985b82c9a60276ad/)

## Comment construire une expression régulière

Au commencement il faut spécifier des caractères.

- **un seul** caractère:
    - vous le citez tel quel, en le précédent d'un backslash `\` s'il a par ailleurs un sens spécial dans le micro-langage de regexps (comme `+`, `*`, `[`, etc.);
- l'**attrape-tout** (*wildcard*):
    - un point `.` signifie "n'importe quel caractère";
- **un ensemble** de caractères avec la notation `[...]` qui permet de décrire par exemple:
    - `[a1=]` un ensemble in extenso, ici un caractère parmi `a`, `1`, ou `=`,
    - `[a-z]` un intervalle de caractères, ici de `a` à `z`,
    - `[15e-g]` un mélange des deux, ici un ensemble qui contiendrait `1`, `5`, `e`, `f` et `g`,
    - `[^15e-g]` une **négation**, qui a `^` comme premier caractère dans les `[]`, ici tout sauf l'ensemble précédent;
- un **ensemble prédéfini** de caractères, qui peuvent alors dépendre de l'environnement (UNICODE et LOCALE) avec entre autres les notations:
    - `\w` les caractères alphanumériques, et `\W` (les autres),
    - `\s` les caractères "blancs" - espace, tabulation, saut de ligne, etc., et `\S` (les autres),
    - `\d` pour les chiffres, et `\D` (les autres).

        sample = "abcd"
        
        for regexp in ['abcd', 'ab[cd][cd]', 'ab[a-z]d', r'abc.', r'abc\.']:
            match = re.match(regexp, sample)
            print(f"{sample} / {regexp:<10s} → {nice(match)}")
        
        # Reourne : 
        
        abcd / abcd       → Match!
        abcd / ab[cd][cd] → Match!
        abcd / ab[a-z]d   → Match!
        abcd / abc.       → Match!
        abcd / abc\.      → no

    - Forme de base

        print(nice(re.match (r"abc\.", "abc.")))
        
        REtourne : Match!

    ### Compléments : site web pour évaluer les regexp

    [Pythex: a Python regular expression editor](https://pythex.org/)

    > Pour ceux qui ont quelques rudiments de la théorie des langages, vous savez qu'on distingue en général
    - **l'analyse lexicale**, qui découpe le texte en morceaux (qu'on appelle des tokens),
    et **l'analyse syntaxique** qui décrit pour simplifier à l'extrême l'ordre dans lequel on peut trouver les tokens.
    Avec les expression régulières, on adresse le niveau de l'analyse lexicale.

    ### Exercice 1 Base

    - Ecrire une regexp

        regexp_pythonid = r"^\w+"   # Sauf pour '1Aa' !

    ### Exercice 1 Avancé

    - REcherche sur une url avec des groupes

    # Vidéo 3 Les séquences

    ---

    - Un ensemble de types : les séquences que sont : les list, tuple, str, bytes, autres.
    - Une séquence est un ensemble d'éléments FINIS et ORDONNES indicés de 0 à n-1 pour n éléments
    - Cas des chaînes de caractères (même si il y a une virgule, cela reste une simple chaîne)

        s = 'Hi, José'
        print(f"La chaîne '{s}' est de type : '{type(s)}'.")  # avec la f-string
        
        print(f"Le 5ième caractère est '{s[4]}'.")
        
        for caractere in s:
            print(caractere)
        
        # Retourne :
        # La chaîne 'Hi, José' est de type : '<class 'str'>'.
        # Le 5ième caractère est 'J'.
        # H
        # i
        # ,
         
        # J
        # o
        # s
        # é
        

     

    ## Opérations communes aux sécquences

    - **Indexer** les éléments avec s[5] de 0 à n-1
    - **Longueur** de la séquence : `len(s)`
    - **Test d'appartenance** `'José' in s` True  ou `'José' not in s`  False
    - Concaténation `s + ' Coucou'`
    - Première occurence avec index : `s.index('H')`
    - Nombre d'éléments avec count : `s.count('o')`
    - Min et max, retourne la plus petite et la plus grande valeur du code ascii des caractères de la chaîne
    - Copie / multiplication de la chaine

        t = '*|*'
        t * 5
        
        # Retourne : '*|**|**|**|**|*'  5 fois la chaîne

        Opération slicing... tranchage !  s[:25]  avec [x:y] :  créé une copie Shadow copy ???

    - avec step `s[2:20**:2**]`
    - Hors de la gamme : **`s[100]`** retourne une erreur mais **`s[5:100]`** retournera que les caractères existants et `**s[100:200]`** retournera une chaîne vide :)
    - Indice négatif, numérotation à partir de la fin  `s[-10:-5]`

    AVec un step négatif, la chaîne est affichée en inverse `s[::-1]`

    ### Cas des listes

        liste = [0, 2, 4, 8, 16, 32, 64, 128]
        liste
        
        liste[-1:1:-2]
         # Retourne : [128, 32, 8]

    - et aussi

        liste[2:4] = [100, 200, 300, 400, 500]
        liste
        
        # Retourne : [0, 2, 100, 200, 300, 400, 500, 16, 32, 64, 128]
        # à la place du 3ième et 5 (le 4 et 8 sont remplacés par la nouvelle chaîne) 

    ## Complément avancé avec numpy

        # ces deux premières cellules sont à admettre
        # on construit un tableau ligne
        import numpy as np
        
        un_cinq = np.array([1, 2, 3, 4, 5])
        un_cinq
        
        # ces deux premières cellules sont à admettre
        # on le combine avec lui-même - et en utilisant une slice un peu magique
        # pour former un tableau carré 5x5
        
        array = 10 * un_cinq[:, np.newaxis] + un_cinq
        array
        
        # Retourne une modification des valeurs de l'array
        array([[11, 12, 13, 14, 15],
               [21, 22, 23, 24, 25],
               [31, 32, 33, 34, 35],
               [41, 42, 43, 44, 45],
               [51, 52, 53, 54, 55]])

    # Vidéo 4 Les listes

    ---

    - Listes est souples et puissants. La liste ne stocke pas les objets mais les références à ces objets
    - La taille de l'objet liste est indépendante de son contenu

    La liste est un **objet mutable. On peut le modifier "sur place", pas besoin de la copier pour le modifier**

    - Liste : déclaration et type

        l = []
        type(l)
        
        # Retourne List

        i =4 
        a = [i, "spam", 3.2, True, 3 +3j ]  # contient tout type d'objets
        
        print(a)
        
         # retourne [4, 'spam', 3.2, True, (3+3j)] (Crochet = Liste
        
        for c in a:
            print(c)
        
        # Retourne la liste

    - Affectation sur slice. Deux étapes
        - Efface les données identifiées
        - Ajout de la nouvelle liste

            a[1:2] = [1, 2, 56]
            
            # Retourne [6.4, **1, 2, 56**, 3.2, True, (3+3j)] # Retrait et rajout

        - vec un élément, il introduit une liste

            c = [1, True, 'Bonjour', 3.14]
            c[1] = [1.5, '4', 'Coucou']
            
             # Retourne : [1, **[1.5, '4', 'Coucou']**, 'Bonjour', 3.14]
            
            # Alors que
            d = [1, True, 'Bonjour', 3.14]
            d[1:2] = [1.5, '4', 'Coucou']
            
             # retourne [1, **1.5, '4', 'Coucou'**, 'Bonjour', 3.14]

        - Remplacement avec une liste vide supprime des éléments

            d[1:3] = []
            d
            
             # Retourne [1, 'Coucou', 'Bonjour', 3.14] : **1.5, '4' de supprimé**

        - Voir aussi avec del

            del d[2:3]
            d
            
            Retourne : [1, 'Coucou', 3.14], bonjour a disparu :)

    - Liste des méthodes `dir(d)`
    - Ajout avec Append

        a.append('C\'est moi en plus')
        a
        
        # REtourne :
        # 3.2,
        #  True,
        #  (3+3j),
        #  **"C'est moi en plus"**] 

    - Ajout avec expend() Attention, prend qu'un seul argument !

        liste.extend([1, 3.14, 'Bonjour'])
        liste
        
        # Retourne [1, 'Bonjour, nouvevau, 3.14', 3.14, 1, **1, 3.14, 'Bonjour'**]

    - Différence entre .append et .extend()

        Signature: list.append(self, object, /)
        Docstring: Append object to the end of the list.
        Type:      method_descriptor
        
        Signature: list.extend(self, iterable, /)
        Docstring: **Extend list by appending elements from the iterable.**
        Type:      method_descriptor

    - le tri avec .sort(), que sur les int ???

        Signature: list.sort(self, /, *, key=None, reverse=False)
        Docstring: Stable sort *IN PLACE*.
        Type:      method_descriptor
        
        
        a = [ 23, 5, 8]
        a.sort()
        a
        
        # Retourne [5, 8, 23]

    - sort() fait un tri "en place", sans faire de copie temporaire, on a perdu la liste initiale
    - La methode .sort() ne retourne rien car elle a fait que de modifier la liste
    - Ne pas affecter une méthode .sort(), vous auriez une chaîne vide (print un None)

    ### Passez d'une chaîne de caractères à une liste et réciproquement

    - Avec fonction .split()

        s = "03-03-27-65-18"
        print(s.split('-'))       # généralement s.split(), espace comme séparateur
        
        Retourne :['03', '03', '27', '65', '18']

    - Avec fonction .join()

        " ".join(s)

    ## Méthodes spécifiques aux listes

    - Aide
        - help(list) ou list? ou list.append?
    - .extend() : La méthode extend réalise la même opération que append(), mais avec tous les éléments ajoutés que l'on passe en argument
    - .ppend() : ajoute un élément à la fin d'une liste

            liste.append('ap')
            print('liste', liste)
            
            # Retourne liste [0, 1, 2, 3, 'ap']
            
            liste2 = ['ex1', 'ex2']
            liste.extend(liste2)
            print('liste', liste)
            
            # Retourne liste [0, 1, 2, 3, 'ap', 'ex1', 'ex2']
            

    - append() versus +
        - la liste est un objet mutable. `append` et `extend` modifient la liste sur laquelle elles travaillent, alors que l'addition crée un nouvel objet.

            a1 = list(range(5))
            print(a)
            
            # Retourne [0, 1, 2, 3, 4] list(range(n)) retourne les n premiers entiers
            
            a2 = list(range(10, 13))
            print(a2)
            
            # Retourne [10, 11, 12]
            
            a3 = a1 + a2  
            print(a3)
            
            # Retourne [0, 1, 2, 3, 4, 10, 11, 12]... Il y a une nouvelle variable

    - insert(), insertion à partir d'un indice

        a2.insert(1, 1.5)
        a2
        
        Retourne [10, **1.5,** 11, 1.5, 12]

    - remove() Retire une valeur dans la liste indiquée dans la parenthèse

        a2.remove(1.5)
        a2
        
        # Retourne [10, 11, 12]

    - pop() indice en argument, on retourne cette élément et on l'enlève de la liste

        print(a2)
        
        popped = a2.pop(1)
        print('popped : ', popped, 'Nouvelle liste a2 :', a2)
        
        # Retourne : [10, 11, 12]
        # popped :  11 Nouvelle liste a2 : [10, 12]

    - reverse()

        print(a2)
        
        popped = a2.reverse()
        print('Nouvelle liste a2 renversée :', a2)
        
        # Retourne : [12, 10]
        # Nouvelle liste a2 renversée : [10, 12]
        
        

    - Ici la variable est modifiée, ce n'est pas le cas avec la manip du slicing avec un pas négatif
- clear() pour vider la liste :)
- Autres commandes sur les listes :

[5. Data Structures - Python 3.8.1 documentation](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists)

- Stack and queue
    - Stack : "last in, first out" avec append et pot
    - Queue : first in, last out, avec `from collections import deque`

        from collections import deque
        queue = deque(["Eric", "John", "Michael"])
        queue
        
        # Retourne  deque(['Eric', 'John', 'Michael'])
        
        queue.append("Terry")
        queue
        
        # Retourne  deque(['Eric', 'John', 'Michael', 'Terry']) Ajouter à la fin
        
        queue.popleft()
        queue
        
        # Retourne deque(['John', 'Michael', 'Terry']) Le premier est parti

- Tabulation, permet de compléter un mot ou liste de possibilité

## Objets mutables et objets immuables

- Les chaînes sont des objets immuables
- Exercices sur **pythontutor**

[Visualize Python, Java, JavaScript, C, C++, Ruby code execution](http://pythontutor.com/visualize.html#mode=edit)

- Les chaînes sont immuables, c'est à dire que lorsque l'on veut faire une modification, elle sera dans une affectation
- alors que les listes sont mutables, si vous modifier une liste, toutes les listes associées seront modifiées

### Tris de listes

- .sort() fait un tri "**en place**"... cela change la liste d'origine

    liste1 = [1,5,3.14,300, 0]
    
    print(liste1)
    print(liste1.sort(), " - ", liste1)
    
    # Retourne : 
    # [1, 5, 3.14, 300, 0]
    # None  -  [0, 1, 3.14, 5, 300]

- avec sorted(), la liste d'origine n'est pas modifiée la nouvelle liste triée sera à sauvegardée

    liste1 = [1,5,3.14,300, 0]
    
    liste_triee = sorted(liste1)
    print(liste1, " - ", liste_triee)
    
    # Retourne : [1, 5, 3.14, 300, 0]  -  [0, 1, 3.14, 5, 300]  Liste n'est pas modifiée 

- Tri décroissant avec .sort(reverse=True)
    - Note : l'ordre ASCII, a < z mais le Z < a, donc ['Zoo', 'abc']

    liste1 = [1,5,3.14,300, 0]
    liste1.sort(reverse=True)
    liste1
    
    # Retourne : [300, 5, 3.14, 1, 0]

# Vidéo 5 Instroduction aux tests et à la syntaxe

[https://www.fun-mooc.fr/courses/course-v1:UCA+107001+session02/courseware/16fe81d60f134de9a10dd0c44a597584/313eca0d59014cd3bb1276c8ab5e99ad/](https://www.fun-mooc.fr/courses/course-v1:UCA+107001+session02/courseware/16fe81d60f134de9a10dd0c44a597584/313eca0d59014cd3bb1276c8ab5e99ad/)

- Les tests
    - a > b, a < b, a >= b, a <= b, a == b, a != b
    - a in s, a not in s

    note = 8
    if note > 10:                 # if et les deux points
    	print('bravo !')      # Décalage de 4 caractères des lignes du bloc
    else:                         # else et les deux points
    	print('Dommage')

- Attention au copier-coller avec l'indentation de 4 caractères
- Des lignes de max 79 caractères
- Synthaxe :
    - respecter le : et au minimum indentation avec un caractère
    - ne pas utiliser les tabulations dans le code, mais les caractères (attention aux éditeurs)
    - 

## Compléments sur la programmation

- pass pour les modules vides

    # une fonction Python qui ne fait rien
    def foo():
        pass

- booucle vide

    liste = list(range(10))
    print('avant', liste)
    while liste.pop() != 5:    # Fait juste tourner le compteur pour sortir
        pass                   # c'est pop qui fait l'action    
    print('après', liste)

- Condition vide (ou en cours de dév

    # on peut s'en sortir en ajoutant une instruction pass
    if condition:
    #    print "non"
        pass
    else:
        print("bingo")

- Classe vide

    class Foo:
        pass

# Vidéo 6 Introductions aux boucles for et aux fonctions

- L'automatisation des tâches

    for i in range(5):
        print(i*2)
    
     # Retourne 
    0
    2
    4
    6
    8 

- ou

    for i in ['Coucou', 2, 3.14]:
        print(i)
    
     # Retourne 
    Coucou
    2
    3.14

### Création d'une fonction def

    # Définition de la fonction
    def carre(a):
        for i in a:
            print(i**2)
    
    # utilisation
    carre([2,5,6])
    
    # REtourne 
    4
    25
    36
    
    # autre utilisation
    ma_liste = [2, 3.14, 10]
    carre(ma_liste)
    
    # Retourne : 
    4
    9.8596
    100

- Pas de print dans une boucle, plutôt un return

    def carre(a):
        L=[]                  # Remarque, L est une variable locale
        for i in a:
            L.append(i**2)
        return L              # C'est le "print" du résutat

- Pour affecter la liste des carrés retournés par la fonction

    retour = carre(ma_liste)
    retour
    
    # retourne [4, 9.8596, 100]
